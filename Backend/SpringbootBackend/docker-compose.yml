version: '3.9'

services:

  redis:
    image: redis:6.0-alpine
    container_name: food-ordering-app-redis01
    ports:
      - "16379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      food_ordering_app_backend_network:
        ipv4_address: 177.77.0.2

  mysql:
    image: mysql:8.0
    container_name: food-ordering-app-mysql01
    ports:
      - "13306:3306"
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      - "MYSQL_ROOT_PASSWORD=2O0JciiKsCFJf0ztv"
      - "MYSQL_DATABASE=food_ordering_app"
    volumes:
      - ${HOME}/volumes_mapping/mysql:/var/lib/mysql
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: mysqladmin ping -h localhost -u root --password=$$MYSQL_ROOT_PASSWORD
      interval: 1s
      timeout: 120s
      retries: 120
    networks:
      food_ordering_app_backend_network:
        ipv4_address: 177.77.0.3

  mongodb:
    image: mongo:4.2.21-bionic
    container_name: food-ordering-app-mongodb01
    restart: always
    environment:
      - "MONGO_INITDB_DATABASE=orderDetails"
      - "MONGO_INITDB_ROOT_USERNAME=root"
      - "MONGO_INITDB_ROOT_PASSWORD=secret"
    ports:
      - "17017:27017"
    volumes:
      - ${HOME}/volumes_mapping/mongodb:/data/db
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/orderDetails --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      food_ordering_app_backend_network:
        ipv4_address: 177.77.0.4

  minio:
    image: quay.io/minio/minio:latest
    container_name: food-ordering-app-minio01
    restart: always
    environment:
      - "MINIO_ROOT_USER=x6YNVgdyugY"
      - "MINIO_ROOT_PASSWORD=4Kl41vUHOad/Luzs4+HvgGaadw"
    command: server /data{1...8} --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ${HOME}/volumes_mapping/minio/data1:/data1
      - ${HOME}/volumes_mapping/minio/data2:/data2
      - ${HOME}/volumes_mapping/minio/data3:/data3
      - ${HOME}/volumes_mapping/minio/data4:/data4
      - ${HOME}/volumes_mapping/minio/data5:/data5
      - ${HOME}/volumes_mapping/minio/data6:/data6
      - ${HOME}/volumes_mapping/minio/data7:/data7
      - ${HOME}/volumes_mapping/minio/data8:/data8
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      food_ordering_app_backend_network:
        ipv4_address: 177.77.0.5

  spring-boot:
    container_name: food-ordering-app-springboot
    build:
      context: ""
      dockerfile: springboot_dockerfile
    depends_on:
      minio:
        condition: service_healthy
    ports:
      - "18080:8080"
    networks:
      food_ordering_app_backend_network:
        ipv4_address: 177.77.0.6
    tty: true

networks:
  food_ordering_app_backend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 177.77.0.0/16
          gateway: 177.77.0.1

